name: PR Handler Workflow with Gemini
on:
  pull_request:
    types: [opened]

jobs:
  handle-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Save PR Changes to File
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }}...HEAD > changes.txt

      - name: Print Changes File
        run: cat changes.txt

      - name: Generate PR Title and Description with Gemini
        id: gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Properly escape diff content into a JSON-safe string using jq
          CHANGES=$(jq -Rs . < changes.txt)
      
          PROMPT="Based on the following code changes, generate a concise PR title (max 72 characters) and a detailed description. The title should summarize the main change, and the description should explain what was changed and why. Format your response as JSON with 'title' and 'description' fields.
      
          Code changes:
          $CHANGES"
          
              # Prepare JSON for Gemini API call using jq to ensure proper escaping
              REQUEST_BODY=$(jq -n --arg prompt "$PROMPT" '{
                contents: [{
                  parts: [{
                    text: $prompt
                  }]
                }]
              }')
          
          # Call Gemini API
          RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY")
      
          echo "Gemini Response: $RESPONSE"
      
          # Extract raw Gemini response
          CONTENT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          
          # Clean out Markdown code block formatting
          CLEANED=$(echo "$CONTENT" \
            | sed -E 's/^```json//; s/^```//; s/```$//; s/^```//' \
            | sed '/^$/d')
          
          # Try to parse JSON
          TITLE=$(echo "$CLEANED" | jq -r '.title // empty')
          DESCRIPTION=$(echo "$CLEANED" | jq -r '.description // empty')
          
          # Fallbacks
          if [ -z "$TITLE" ]; then
            TITLE="Auto-generated: Code changes detected"
          fi
          if [ -z "$DESCRIPTION" ]; then
            DESCRIPTION="### ðŸ”„ PR Updated by Workflow
          
          This pull request was automatically updated based on code changes detected.
          
          **Changes detected:**
          - Code modifications found in the repository
          - Please review the changes in the Files Changed tab"
          fi
          
          # Set outputs
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Update PR Title and Description
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr edit "$PR_NUMBER" \
            --title "${{ steps.gemini.outputs.title }}" \
            --body "${{ steps.gemini.outputs.description }}"
