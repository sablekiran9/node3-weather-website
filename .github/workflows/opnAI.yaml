name: PR Handler Workflow with Gemini
on:
  pull_request:
    types: [opened]

jobs:
  handle-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Save PR Changes to File
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }}...HEAD > changes.txt

      - name: Print Changes File
        run: cat changes.txt

      - name: Generate PR Title and Description with Gemini
        id: gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Escape newlines and quotes for JSON formatting
          CHANGES=$(jq -Rs '.' < changes.txt)

          PROMPT="Based on the following code changes, generate a concise PR title (max 72 characters) and a detailed description. The title should summarize the main change, and the description should explain what was changed and why. Format your response as JSON with 'title' and 'description' fields.\n\nCode changes:\n$CHANGES"

          # Make Gemini API call
          RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"contents\": [
                {
                  \"parts\": [
                    {
                      \"text\": \"$PROMPT\"
                    }
                  ]
                }
              ]
            }")

          echo "Gemini Response: $RESPONSE"

          # Extract content text (Gemini returns a stringified JSON response as plain text)
          CONTENT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')

          # Parse JSON inside response text
          TITLE=$(echo "$CONTENT" | jq -r '.title // empty')
          DESCRIPTION=$(echo "$CONTENT" | jq -r '.description // empty')

          if [ -z "$TITLE" ]; then
            TITLE="Auto-generated: Code changes detected"
          fi
          if [ -z "$DESCRIPTION" ]; then
            DESCRIPTION="### ðŸ”„ PR Updated by Workflow

          This pull request was automatically updated based on code changes detected.

          **Changes detected:**
          - Code modifications found in the repository
          - Please review the changes in the Files Changed tab"
          fi

          # Set outputs
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR Title and Description
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr edit "$PR_NUMBER" \
            --title "${{ steps.gemini.outputs.title }}" \
            --body "${{ steps.gemini.outputs.description }}"
